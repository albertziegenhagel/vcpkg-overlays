diff --git a/config/BuildSystem/config/packages/hypre.py b/config/BuildSystem/config/packages/hypre.py
index d3956aa564..ec83971e62 100644
--- a/config/BuildSystem/config/packages/hypre.py
+++ b/config/BuildSystem/config/packages/hypre.py
@@ -4,7 +4,7 @@ import os
 class Configure(config.package.GNUPackage):
   def __init__(self, framework):
     config.package.GNUPackage.__init__(self, framework)
-    self.maxversion      = '2.18.2'
+    self.maxversion      = '2.19.0'
     self.minversion      = '2.14'
     self.versionname     = 'HYPRE_RELEASE_VERSION'
     self.versioninclude  = 'HYPRE_config.h'
diff --git a/src/mat/impls/hypre/mhypre.c b/src/mat/impls/hypre/mhypre.c
index fe29d6371e..c210f13dd4 100644
--- a/src/mat/impls/hypre/mhypre.c
+++ b/src/mat/impls/hypre/mhypre.c
@@ -58,10 +58,7 @@ static PetscErrorCode MatHYPRE_IJMatrixPreallocate(Mat A_d, Mat A_o, HYPRE_IJMat
   }
   if (done_d) {    /* set number of nonzeros in HYPRE IJ matrix */
     if (!done_o) { /* only diagonal part */
-      ierr = PetscMalloc1(n_d,&nnz_o);CHKERRQ(ierr);
-      for (i=0; i<n_d; i++) {
-        nnz_o[i] = 0;
-      }
+      ierr = PetscCalloc1(n_d,&nnz_o);CHKERRQ(ierr);
     }
 #if PETSC_PKG_HYPRE_VERSION_GE(2,16,0)
     { /* If we don't do this, the columns of the matrix will be all zeros! */
@@ -70,8 +67,11 @@ static PetscErrorCode MatHYPRE_IJMatrixPreallocate(Mat A_d, Mat A_o, HYPRE_IJMat
       hypre_AuxParCSRMatrixDestroy(aux_matrix);
       hypre_IJMatrixTranslator(ij) = NULL;
       PetscStackCallStandard(HYPRE_IJMatrixSetDiagOffdSizes,(ij,nnz_d,nnz_o));
+      /* it seems they partially fixed it in 2.19.0 */
+#if PETSC_PKG_HYPRE_VERSION_LT(2,19,0)
       aux_matrix = (hypre_AuxParCSRMatrix*)hypre_IJMatrixTranslator(ij);
       hypre_AuxParCSRMatrixNeedAux(aux_matrix) = 1;
+#endif
     }
 #else
     PetscStackCallStandard(HYPRE_IJMatrixSetDiagOffdSizes,(ij,nnz_d,nnz_o));
@@ -1210,7 +1210,7 @@ static PetscErrorCode MatAssemblyEnd_HYPRE(Mat A, MatAssemblyType mode)
   PetscStackCallStandard(HYPRE_IJMatrixAssemble,(hA->ij));
   /* The assembly routine destroys the aux_matrix, we recreate it here by calling HYPRE_IJMatrixInitialize */
   /* If the option MAT_SORTED_FULL is set to true, the indices and values can be passed to hypre directly, so we don't need the aux_matrix */
-  if(!hA->sorted_full) {
+  if (!hA->sorted_full) {
     hypre_AuxParCSRMatrix *aux_matrix;
 
     /* call destroy just to make sure we do not leak anything */
@@ -1222,7 +1222,11 @@ static PetscErrorCode MatAssemblyEnd_HYPRE(Mat A, MatAssemblyType mode)
     PetscStackCallStandard(HYPRE_IJMatrixInitialize,(hA->ij));
     aux_matrix = (hypre_AuxParCSRMatrix*)hypre_IJMatrixTranslator(hA->ij);
     hypre_AuxParCSRMatrixNeedAux(aux_matrix) = 1; /* see comment in MatHYPRESetPreallocation_HYPRE */
+#if PETSC_PKG_HYPRE_VERSION_LT(2,19,0)
     PetscStackCallStandard(hypre_AuxParCSRMatrixInitialize,(aux_matrix));
+#else
+    PetscStackCallStandard(hypre_AuxParCSRMatrixInitialize_v2,(aux_matrix,HYPRE_MEMORY_HOST));
+#endif
   }
   if (hA->x) PetscFunctionReturn(0);
   ierr = PetscLayoutSetUp(A->rmap);CHKERRQ(ierr);
@@ -1369,9 +1373,7 @@ static PetscErrorCode MatHYPRESetPreallocation_HYPRE(Mat A, PetscInt dnz, const
     if (!onnz) {
       ierr = PetscMalloc1(A->rmap->n,&honnz);CHKERRQ(ierr);
       for (i=0;i<A->rmap->n;i++) honnz[i] = onz;
-    } else {
-      honnz = (HYPRE_Int*)onnz;
-    }
+    } else honnz = (HYPRE_Int*)onnz;
     /* SetDiagOffdSizes sets hypre_AuxParCSRMatrixNeedAux(aux_matrix) = 0, since it seems
        they assume the user will input the entire row values, properly sorted
        In PETSc, we don't make such an assumption and set this flag to 1,
